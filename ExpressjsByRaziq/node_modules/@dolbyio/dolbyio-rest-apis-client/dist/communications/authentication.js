"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getClientAccessToken = void 0;
const httpHelpers_1 = require("../internal/httpHelpers");
const urls_1 = require("./internal/urls");
/**
 * Gets a client access token to authenticate a session.
 *
 * @link https://docs.dolby.io/communications-apis/reference/get-client-access-token
 *
 * @param appKey Your Dolby.io App Key.
 * @param appSecret Your Dolby.io App Secret.
 * @param expiresIn Access token expiration time in seconds. The maximum value is 2,592,000, indicating 30 days. If no value is specified, the default is 3,600, indicating one hour.
 *
 * @returns A `JwtToken` object through a `Promise`.
 */
const getClientAccessToken = (appKey, appSecret, expiresIn) => __awaiter(void 0, void 0, void 0, function* () {
    let body = 'grant_type=client_credentials';
    if (expiresIn) {
        body += `&expires_in=${expiresIn}`;
    }
    const authz = Buffer.from(`${appKey}:${appSecret}`).toString('base64');
    const options = {
        hostname: urls_1.SESSION_HOSTNAME,
        path: '/v1/oauth2/token',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Cache-Control': 'no-cache',
            Authorization: `Basic ${authz}`,
        },
        body,
    };
    const response = yield (0, httpHelpers_1.sendPost)(options);
    return response;
});
exports.getClientAccessToken = getClientAccessToken;
//# sourceMappingURL=authentication.js.map