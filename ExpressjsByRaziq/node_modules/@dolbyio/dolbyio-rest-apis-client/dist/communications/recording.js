"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stop = exports.start = void 0;
const httpHelpers_1 = require("../internal/httpHelpers");
const urls_1 = require("./internal/urls");
/**
 * Starts recording for the specified conference.
 * You can specify a custom layout URL per recording request.
 * The `layoutURL` parameter overrides the layout URL configured in the dashboard.
 *
 * @link https://docs.dolby.io/communications-apis/reference/api-recording-start
 *
 * @param accessToken Access token to use for authentication.
 * @param conferenceId Identifier of the conference.
 * @param layoutUrl Overwrites the layout URL configuration.
 *      This field is ignored if it is not relevant regarding recording configuration,
 *      for example if live_recording set to false or if the recording is MP3 only.
 *      - `null`: uses the layout URL configured in the dashboard (if no URL is set in the dashboard, then uses the Dolby.io default);
 *      - `default`: uses the Dolby.io default layout;
 *      - URL string: uses this layout URL
 */
const start = (accessToken, conferenceId, layoutUrl) => __awaiter(void 0, void 0, void 0, function* () {
    const body = {};
    if (layoutUrl)
        body['layoutUrl'] = layoutUrl;
    const options = {
        hostname: urls_1.COMMS_HOSTNAME,
        path: `/v2/conferences/mix/${conferenceId}/recording/start`,
        headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
            Authorization: `${accessToken.token_type} ${accessToken.access_token}`,
        },
        body: JSON.stringify(body),
    };
    yield (0, httpHelpers_1.sendPost)(options);
});
exports.start = start;
/**
 * Stops the recording of the specified conference.
 *
 * @link https://docs.dolby.io/communications-apis/reference/api-recording-stop
 *
 * @param accessToken Access token to use for authentication.
 * @param conferenceId Identifier of the conference.
 */
const stop = (accessToken, conferenceId) => __awaiter(void 0, void 0, void 0, function* () {
    const options = {
        hostname: urls_1.COMMS_HOSTNAME,
        path: `/v2/conferences/mix/${conferenceId}/recording/stop`,
        headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
            Authorization: `${accessToken.token_type} ${accessToken.access_token}`,
        },
    };
    yield (0, httpHelpers_1.sendPost)(options);
});
exports.stop = stop;
//# sourceMappingURL=recording.js.map