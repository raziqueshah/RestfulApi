"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stopRts = exports.startRts = exports.stopRtmp = exports.startRtmp = void 0;
const httpHelpers_1 = require("../internal/httpHelpers");
const urls_1 = require("./internal/urls");
/**
 * Starts the RTMP live stream for the specified conference.
 * Once the Dolby.io Communication API service started streaming to the target url,
 * a `Stream.Rtmp.InProgress` Webhook event will be sent.
 *
 * @link https://docs.dolby.io/communications-apis/reference/start-rtmp
 *
 * @param accessToken Access token to use for authentication.
 * @param conferenceId Identifier of the conference.
 * @param rtmpUrl The destination URI provided by the RTMP service.
 * @param layoutUrl Overwrites the layout URL configuration:
 *      - `null`: uses the layout URL configured in the dashboard (if no URL is set in the dashboard, then uses the Dolby.io default);
 *      - `default`: uses the Dolby.io default layout;
 *      - URL string: uses this layout URL
 */
const startRtmp = (accessToken, conferenceId, rtmpUrl, layoutUrl) => __awaiter(void 0, void 0, void 0, function* () {
    const body = { uri: rtmpUrl };
    if (layoutUrl)
        body['layoutUrl'] = layoutUrl;
    const options = {
        hostname: urls_1.COMMS_HOSTNAME,
        path: `/v2/conferences/mix/${conferenceId}/rtmp/start`,
        headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
            Authorization: `${accessToken.token_type} ${accessToken.access_token}`,
        },
        body: JSON.stringify(body),
    };
    yield (0, httpHelpers_1.sendPost)(options);
});
exports.startRtmp = startRtmp;
/**
 * Stops the RTMP stream of the specified conference.
 *
 * @link https://docs.dolby.io/communications-apis/reference/stop-rtmp
 *
 * @param accessToken Access token to use for authentication.
 * @param conferenceId Identifier of the conference.
 */
const stopRtmp = (accessToken, conferenceId) => __awaiter(void 0, void 0, void 0, function* () {
    const options = {
        hostname: urls_1.COMMS_HOSTNAME,
        path: `/v2/conferences/mix/${conferenceId}/rtmp/stop`,
        headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
            Authorization: `${accessToken.token_type} ${accessToken.access_token}`,
        },
    };
    yield (0, httpHelpers_1.sendPost)(options);
});
exports.stopRtmp = stopRtmp;
/**
 * Starts real-time streaming using Dolby.io Real-time Streaming services (formerly Millicast).
 *
 * @link https://docs.dolby.io/communications-apis/reference/start-rts
 *
 * @param accessToken Access token to use for authentication.
 * @param conferenceId Identifier of the conference.
 * @param streamName The Millicast stream name to which the conference is broadcasted.
 * @param publishingToken The Millicast publishing token used to identify the broadcaster.
 * @param layoutUrl Overwrites the layout URL configuration:
 *      - `null`: uses the layout URL configured in the dashboard (if no URL is set in the dashboard, then uses the Dolby.io default);
 *      - `default`: uses the Dolby.io default layout;
 *      - URL string: uses this layout URL
 */
const startRts = (accessToken, conferenceId, streamName, publishingToken, layoutUrl) => __awaiter(void 0, void 0, void 0, function* () {
    const body = {
        streamName: streamName,
        publishingToken: publishingToken,
    };
    if (layoutUrl)
        body['layoutUrl'] = layoutUrl;
    const options = {
        hostname: urls_1.COMMS_HOSTNAME,
        path: `/v2/conferences/mix/${conferenceId}/rts/start`,
        headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
            Authorization: `${accessToken.token_type} ${accessToken.access_token}`,
        },
        body: JSON.stringify(body),
    };
    yield (0, httpHelpers_1.sendPost)(options);
});
exports.startRts = startRts;
/**
 * Stops real-time streaming to Dolby.io Real-time Streaming services.
 *
 * @link https://docs.dolby.io/communications-apis/reference/stop-rts
 *
 * @param accessToken Access token to use for authentication.
 * @param conferenceId Identifier of the conference.
 */
const stopRts = (accessToken, conferenceId) => __awaiter(void 0, void 0, void 0, function* () {
    const options = {
        hostname: urls_1.COMMS_HOSTNAME,
        path: `/v2/conferences/mix/${conferenceId}/rts/stop`,
        headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
            Authorization: `${accessToken.token_type} ${accessToken.access_token}`,
        },
    };
    yield (0, httpHelpers_1.sendPost)(options);
});
exports.stopRts = stopRts;
//# sourceMappingURL=streaming.js.map