"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.downloadFile = exports.getDownloadUrl = exports.getUploadUrl = void 0;
const httpHelpers_1 = require("./internal/httpHelpers");
const httpHelpers_2 = require("../internal/httpHelpers");
const urls_1 = require("./internal/urls");
const getUrl = (accessToken, endpointUrl, dlbUrl) => __awaiter(void 0, void 0, void 0, function* () {
    const payload = {
        url: dlbUrl,
    };
    const requestOptions = {
        hostname: urls_1.API_HOSTNAME,
        path: endpointUrl,
        headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json',
        },
        accessToken,
        body: JSON.stringify(payload, null, '  '),
    };
    const response = yield (0, httpHelpers_1.sendPost)(requestOptions);
    if (response.hasOwnProperty('url')) {
        return response['url'];
    }
    return null;
});
/**
 * Gets an upload URL.
 *
 * To use the Dolby provided temporary storage is a two step process.
 *
 * You start by declaring a dlb:// url that you can reference in any other Media API calls. The response will provide a url where you can put your media. This allows you to use the dlb:// url as a short-cut for a temporary storage location.
 *
 * You'll be returned a pre-signed url you can use to PUT and upload your media file. The temporary storage should allow you to read and write to the dlb:// locations for a period of at least 24 hours before it is removed.
 *
 * @link https://docs.dolby.io/media-apis/reference/media-input
 *
 * @param accessToken Access token to use for authentication.
 * @param dlbUrl The `url` should be in the form `dlb://object-key` where the object-key can be any alpha-numeric string. The object-key is unique to your account API Key so there is no risk of collision with other users.
 *
 * @returns The upload URL through a `Promise`.
 */
const getUploadUrl = (accessToken, dlbUrl) => __awaiter(void 0, void 0, void 0, function* () {
    return yield getUrl(accessToken, '/media/input', dlbUrl);
});
exports.getUploadUrl = getUploadUrl;
/**
 * Gets the download URL.
 *
 * You can download media you previously uploaded with /media/input or media that was generated through another Dolby Media API.
 *
 * The temporary storage should allow you to read and write to the dlb:// locations for a period of at least 24 hours before it is removed.
 *
 * @link https://docs.dolby.io/media-apis/reference/media-output-post
 *
 * @param accessToken Access token to use for authentication.
 * @param dlbUrl The `url` should be in the form `dlb://object-key` where the object-key can be any alpha-numeric string. The object-key is unique to your account API Key so there is no risk of collision with other users.
 *
 * @returns The download URL through a `Promise`.
 */
const getDownloadUrl = (accessToken, dlbUrl) => __awaiter(void 0, void 0, void 0, function* () {
    return yield getUrl(accessToken, '/media/output', dlbUrl);
});
exports.getDownloadUrl = getDownloadUrl;
/**
 * Download a media file.
 *
 * You can download media you previously uploaded with /media/input or media that was generated through another Dolby Media API.
 *
 * The temporary storage should allow you to read and write to the dlb:// locations for a period of at least 24 hours before it is removed.
 *
 * @link https://docs.dolby.io/media-apis/reference/media-output-get
 *
 * @param accessToken Access token to use for authentication.
 * @param dlbUrl The `url` should be in the form `dlb://object-key` where the object-key can be any alpha-numeric string. The object-key is unique to your account API Key so there is no risk of collision with other users.
 * @param filePath Local file path where to download the file to.
 */
const downloadFile = (accessToken, dlbUrl, filePath) => __awaiter(void 0, void 0, void 0, function* () {
    let downloadUrl = yield (0, exports.getDownloadUrl)(accessToken, dlbUrl);
    downloadUrl = downloadUrl.replace('https://', '');
    const idx = downloadUrl.indexOf('/');
    const requestOptions = {
        hostname: downloadUrl.substring(0, idx),
        path: downloadUrl.substring(idx + 1),
        headers: {},
    };
    return (0, httpHelpers_2.download)(filePath, requestOptions);
});
exports.downloadFile = downloadFile;
//# sourceMappingURL=io.js.map